"""
Telegram Bot Module
"""
import logging
import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ConversationHandler, filters, ChatMemberHandler, ChatJoinRequestHandler
)
from telegram.ext import CallbackContext
from datetime import datetime, timezone
from sqlalchemy.orm import Session

from app.core.config import settings
from app.core.database import get_db_session
from app.core.utils import rate_limit, retry_on_failure, measure_performance
from app.models.models import User, Subscription, BotSettings, ChannelMembership

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format=settings.LOG_FORMAT,
    level=getattr(logging, settings.LOG_LEVEL.upper())
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(
    FILLING_QUESTIONNAIRE,
    WAITING_FOR_CONSENT,
    MAIN_MENU,
    SETTINGS_MENU,
    PAYMENT_MENU
) = range(5)

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data_temp = {}

def get_bot_setting(key: str, default: str = "") -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –∏–∑ –ë–î"""
    try:
        with get_db_session() as db:
            setting = db.query(BotSettings).filter(BotSettings.key == key).first()
            return setting.value if setting else default
    except Exception as e:
        logger.error(f"Error getting bot setting {key}: {e}")
        return default

def generate_protected_link(base_url: str, user_id: int) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞—â–∏—â–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏ —Å –Ω–µ–≤–∏–¥–∏–º—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º ID"""
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–≤–∏–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –∑–∞—Ç—Ä—É–¥–Ω–µ–Ω–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    invisible_chars = ["\u200B", "\u200C", "\u200D", "\uFEFF", "\u2060"]  # –†–∞–∑–Ω—ã–µ –Ω–µ–≤–∏–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
    
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é –∑–∞—â–∏—â–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ user_id
    protected_url = ""
    
    for i, char in enumerate(base_url):
        protected_url += char
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–≤–∏–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã —á–∞—â–µ –∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç user_id
        if i % 2 == 1:  # –ö–∞–∂–¥—ã–π –≤—Ç–æ—Ä–æ–π —Å–∏–º–≤–æ–ª
            char_index = (user_id + i) % len(invisible_chars)
            protected_url += invisible_chars[char_index]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–≤–∏–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –∫–æ–Ω—Ü–µ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞—â–∏—Ç—ã
    for _ in range(3):
        char_index = (user_id + _) % len(invisible_chars)
        protected_url += invisible_chars[char_index]
    
    return protected_url


class TelegramBot:
    """Telegram Bot Class"""
    
    def __init__(self, token: str):
        self.token = token
        self.application = Application.builder().token(token).build()
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥ –∏ –º–∞—Ä—à—Ä—É—Ç—ã –ø–æ callback-–∫–Ω–æ–ø–∫–∞–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler("start", self.start_command)],
            states={
                FILLING_QUESTIONNAIRE: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_questionnaire)
                ],
                WAITING_FOR_CONSENT: [
                    CallbackQueryHandler(self.handle_consent, pattern="^consent_")
                ],
                MAIN_MENU: [
                    CallbackQueryHandler(self.handle_profile, pattern="^profile$"),
                    CallbackQueryHandler(self.handle_settings, pattern="^settings$"),
                    CallbackQueryHandler(self.handle_private_chat, pattern="^private_chat$"),
                    CallbackQueryHandler(self.show_payment_menu, pattern="^payment$"),  # —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä–æ–π –∫–Ω–æ–ø–∫–æ–π
                    CallbackQueryHandler(self.handle_update_profile, pattern="^update_profile$"),
                    CallbackQueryHandler(self.handle_main_menu, pattern="^main_back$")
                ],
                SETTINGS_MENU: [
                    CallbackQueryHandler(self.handle_settings_menu, pattern="^settings_"),
                    CallbackQueryHandler(self.show_payment_menu, pattern="^payment$"),
                    CallbackQueryHandler(self.handle_main_menu, pattern="^main_back$")
                ],
                PAYMENT_MENU: [
                    CallbackQueryHandler(self.handle_payment_menu, pattern="^payment_"),
                    CallbackQueryHandler(self.handle_settings_menu, pattern="^settings_back$")
                ]
            },
            fallbacks=[CommandHandler("cancel", self.cancel_command)],
            per_message=False
        )
        
        self.application.add_handler(conv_handler)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–¥–ª—è –≥—Ä—É–ø–ø/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø)
        self.application.add_handler(ChatMemberHandler(self.handle_chat_member_update, ChatMemberHandler.CHAT_MEMBER))
        self.application.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, self.handle_new_chat_members))
        self.application.add_handler(MessageHandler(filters.StatusUpdate.LEFT_CHAT_MEMBER, self.handle_left_chat_member))
        
        # –ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã –≤ –∫–∞–Ω–∞–ª–µ)
        self.application.add_handler(ChatJoinRequestHandler(self.handle_chat_join_request))
        
        # –û—Ç–ª–∞–¥–∫–∞
        self.application.add_handler(MessageHandler(filters.ALL, self.handle_all_messages))
        
        logger.info("Handlers setup completed")
    
    async def error_handler(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {context.error}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—à–∏–±–∫–µ
        if update and update.effective_message:
            await update.effective_message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞."
            )
        
        return ConversationHandler.END
    
    @measure_performance
    @rate_limit(requests_per_minute=30, requests_per_hour=300)
    async def profile_command(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile"""
        await self.handle_profile(update, context)
        return MAIN_MENU
    
    @measure_performance
    @rate_limit(requests_per_minute=30, requests_per_hour=300)
    async def settings_command(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings"""
        await self.handle_settings(update, context)
        return SETTINGS_MENU
    
    @measure_performance
    @rate_limit(requests_per_minute=10, requests_per_hour=100)
    async def start_command(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        telegram_id = user.id
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        if user.id in user_data_temp:
            del user_data_temp[user.id]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        try:
            with get_db_session() as db:
                existing_user = db.query(User).filter(User.telegram_id == telegram_id).first()
                if existing_user and existing_user.consent_given:
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
                    keyboard = [
                        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="update_profile")],
                        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_back")]
                    ]
                    await update.message.reply_text(
                        "üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n"
                        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                        reply_markup=InlineKeyboardMarkup(keyboard)
                    )
                    return MAIN_MENU
                else:
                    # –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
                    await self.start_registration(update, context)
                    return FILLING_QUESTIONNAIRE
        except Exception as e:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await self.start_registration(update, context)
            return FILLING_QUESTIONNAIRE
    
    async def start_registration(self, update: Update, context):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        user = update.effective_user
        user_data_temp[user.id] = {
            'step': 0,
            'data': {}
        }
        
        questions = [
            "–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):",
            "–í–≤–µ–¥–∏—Ç–µ —Å—Ñ–µ—Ä—É –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:",
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:",
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å –≤ –∫–æ–º–ø–∞–Ω–∏–∏:",
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (+7XXXXXXXXX –∏–ª–∏ 8XXXXXXXXX):",
            "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª—å —É—á–∞—Å—Ç–∏—è:"
        ]
        
        await update.message.reply_text(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É.\n\n{questions[0]}"
        )
    
    @measure_performance
    async def handle_questionnaire(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∞–Ω–∫–µ—Ç—ã"""
        user = update.effective_user
        user_id = user.id
        
        if user_id not in user_data_temp:
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start")
            return ConversationHandler.END
        
        user_data = user_data_temp[user_id]
        step = user_data['step']
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
        fields = ['full_name', 'activity_field', 'company', 'role_in_company', 'contact_number', 'participation_purpose']
        value = update.message.text
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–º–∏–ª–∏–∏ –∏ –∏–º–µ–Ω–∏
        if fields[step] == 'full_name':
            if len(value.split()) < 2:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω)")
                return FILLING_QUESTIONNAIRE
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        if fields[step] == 'contact_number':
            phone_pattern = r'^(\+7|8)\d{10}$'
            if not re.match(phone_pattern, value):
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXX –∏–ª–∏ 8XXXXXXXXX")
                return FILLING_QUESTIONNAIRE
        
        user_data['data'][fields[step]] = value
        user_data['step'] += 1
        
        questions = [
            "–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):",
            "–í–≤–µ–¥–∏—Ç–µ —Å—Ñ–µ—Ä—É –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:",
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:",
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å –≤ –∫–æ–º–ø–∞–Ω–∏–∏:",
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (+7XXXXXXXXX –∏–ª–∏ 8XXXXXXXXX):",
            "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª—å —É—á–∞—Å—Ç–∏—è:"
        ]
        
        if user_data['step'] < len(questions):
            await update.message.reply_text(questions[user_data['step']])
        else:
            # –ê–Ω–∫–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
            user = update.effective_user
            telegram_id = user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
            try:
                with get_db_session() as db:
                    existing_user = db.query(User).filter(User.telegram_id == telegram_id).first()
                    
                    if existing_user and existing_user.consent_given:
                        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω - –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –±–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è
                        await self.update_user_data(update, context, user_data)
                        return MAIN_MENU
                    else:
                        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–æ–≥–ª–∞—Å–∏–µ
                        await self.request_consent_for_update(update, context)
                        return WAITING_FOR_CONSENT
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–æ–≥–ª–∞—Å–∏–µ
                await self.request_consent_for_update(update, context)
            return WAITING_FOR_CONSENT
    
    async def update_user_data(self, update: Update, context, user_data):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞ —Å–æ–≥–ª–∞—Å–∏—è"""
        user = update.effective_user
        user_id = user.id
        
        try:
            with get_db_session() as db:
                existing_user = db.query(User).filter(User.telegram_id == user_id).first()
                
                if existing_user:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    existing_user.full_name = user_data['data'].get('full_name', '')
                    existing_user.activity_field = user_data['data'].get('activity_field', '')
                    existing_user.company = user_data['data'].get('company', '')
                    existing_user.role_in_company = user_data['data'].get('role_in_company', '')
                    existing_user.contact_number = user_data['data'].get('contact_number', '')
                    existing_user.participation_purpose = user_data['data'].get('participation_purpose', '')
                    existing_user.last_activity = datetime.now(timezone.utc)
                    logger.info(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
                    
                    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    if user_id in user_data_temp:
                        del user_data_temp[user_id]
                    
                    await update.message.reply_text(
                        "‚úÖ –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!"
                    )
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                    await self.show_main_menu(update, context)
                else:
                    await update.message.reply_text(
                        "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
                    )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    async def request_consent_for_update(self, update: Update, context):
        """–ó–∞–ø—Ä–æ—Å —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏"""
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", callback_data="consent_yes"),
                InlineKeyboardButton("‚ùå –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data="consent_no")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "–ê–Ω–∫–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\n\n"
            "üìã –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞—à–µ–π –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏:\n"
            f"{settings.PRIVACY_POLICY_URL}\n\n"
            "–ù–∞–∂–∏–º–∞—è '–°–æ–≥–ª–∞—Å–µ–Ω', –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ –¥–∞–µ—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∞—à–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–ª–∏—Ç–∏–∫–æ–π.",
            reply_markup=reply_markup
        )
    
    @retry_on_failure(max_retries=3, delay=1.0)
    async def handle_consent(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "consent_yes":
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            user = update.effective_user
            user_id = user.id
            user_data = user_data_temp[user_id]
            
            try:
                with get_db_session() as db:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                    existing_user = db.query(User).filter(User.telegram_id == user_id).first()
                    
                    if existing_user:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        existing_user.username = user.username
                        existing_user.full_name = user_data['data'].get('full_name', '')
                        existing_user.activity_field = user_data['data'].get('activity_field', '')
                        existing_user.company = user_data['data'].get('company', '')
                        existing_user.role_in_company = user_data['data'].get('role_in_company', '')
                        existing_user.contact_number = user_data['data'].get('contact_number', '')
                        existing_user.participation_purpose = user_data['data'].get('participation_purpose', '')
                        existing_user.consent_given = True
                        existing_user.consent_date = datetime.now(timezone.utc)
                        existing_user.last_activity = datetime.now(timezone.utc)
                        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω")
                    else:
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        new_user = User(
                            telegram_id=user_id,
                            username=user.username,
                            full_name=user_data['data'].get('full_name', ''),
                            activity_field=user_data['data'].get('activity_field', ''),
                            company=user_data['data'].get('company', ''),
                            role_in_company=user_data['data'].get('role_in_company', ''),
                            contact_number=user_data['data'].get('contact_number', ''),
                            participation_purpose=user_data['data'].get('participation_purpose', ''),
                            consent_given=True,
                            consent_date=datetime.now(timezone.utc)
                        )
                        db.add(new_user)
                        logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–æ–∑–¥–∞–Ω")
                    
                    # commit –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–º –º–µ–Ω–µ–¥–∂–µ—Ä–µ
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
                await query.edit_message_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏."
                )
                return ConversationHandler.END
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            del user_data_temp[user_id]
            
            await query.edit_message_text(
                "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É!"
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await self.show_main_menu(update, context)
            return MAIN_MENU
        else:
            await query.edit_message_text(
                "‚ùå –ë–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏."
            )
            return ConversationHandler.END
    
    async def show_main_menu(self, update: Update, context):
        """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        keyboard = [
            [InlineKeyboardButton("üí¨ –ü—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç", callback_data="private_chat")],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
            [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å
        if hasattr(update, 'callback_query') and update.callback_query:
            # –≠—Ç–æ callback query (–Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏)
            await update.callback_query.edit_message_text(
                "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
                reply_markup=reply_markup
            )
        else:
            # –≠—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∫–æ–º–∞–Ω–¥–∞ /start)
            await update.message.reply_text(
                "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
                reply_markup=reply_markup
            )
    
    async def handle_main_menu(self, update: Update, context: CallbackContext) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "main_back":
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            user = update.effective_user
            if user.id in user_data_temp:
                del user_data_temp[user.id]
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å 3 –∫–Ω–æ–ø–∫–∞–º–∏
            await self.show_main_menu(update, context)
            return MAIN_MENU
    
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö callback'–æ–≤ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        if query.data == "payment":
            # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
            await self.handle_settings(update, context)
            return SETTINGS_MENU
        
        return MAIN_MENU

    async def handle_private_chat(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç"""
        query = update.callback_query
        await query.answer()
        
        user = update.effective_user
        telegram_id = user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            with get_db_session() as db:
                db_user = db.query(User).filter(User.telegram_id == telegram_id).first()
                if db_user and db_user.has_active_subscription():
                    # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
                    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–æ–π –Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç
                    private_link = settings.PRIVATE_CHAT_LINK
                    
                    await query.edit_message_text(
                        "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–ª–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª!\n\n"
                        "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n\n"
                        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç:",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("üîó –í–æ–π—Ç–∏ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç", url=private_link)],
                            [InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_back")]
                        ])
                    )
                else:
                    # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏
                    await query.edit_message_text(
                        "‚ùå –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É —á–∞—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø–æ–¥–ø–∏—Å–∫–∞.\n\n"
                        "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' ‚Üí '–û–ø–ª–∞—Ç–∞' –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏.",
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_back")
                        ]])
                    )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            await query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_back")
                ]])
            )
    
    async def handle_settings(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–¥–µ–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        query = update.callback_query
        await query.answer()
        
        keyboard = [
            [InlineKeyboardButton("üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ", callback_data="settings_refill")],
            [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∞", callback_data="settings_payment")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings_back")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
        return SETTINGS_MENU
    
    async def handle_settings_menu(self, update: Update, context: CallbackContext) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "settings_back":
            await self.show_main_menu(update, context)
            return MAIN_MENU
        elif query.data == "settings_payment":
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –º–µ–Ω—é –æ–ø–ª–∞—Ç—ã
            await self.show_payment_menu(update, context)
            return PAYMENT_MENU
        elif query.data == "settings_refill":
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ
            await self.handle_update_profile(update, context)
            return FILLING_QUESTIONNAIRE
        
        return SETTINGS_MENU

    
    async def show_payment_menu(self, update: Update, context):
        """–ü–æ–∫–∞–∑ –º–µ–Ω—é –æ–ø–ª–∞—Ç—ã"""
        query = update.callback_query
        user = update.effective_user
        telegram_id = user.id
        
        try:
            with get_db_session() as db:
                db_user = db.query(User).filter(User.telegram_id == telegram_id).first()
                if db_user and db_user.has_active_subscription():
                    # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞
                    subscription = db_user.subscription
                    end_date = subscription.end_date.strftime("%d.%m.%Y")
                    
                    keyboard = [
                        [InlineKeyboardButton("üîÑ –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ", callback_data="payment_auto_renewal")],
                        [InlineKeyboardButton("‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="payment_cancel")],
                        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="payment_back")]
                    ]
                    
                    await query.edit_message_text(
                        f"üí≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π\n\n"
                        f"‚úÖ –£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞\n"
                        f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {end_date}\n"
                        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {get_bot_setting('subscription_price', '999')} ‚ÇΩ/–º–µ—Å—è—Ü\n\n"
                        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                        reply_markup=InlineKeyboardMarkup(keyboard)
                    )
                else:
                    # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏
                    keyboard = [
                        [InlineKeyboardButton("üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="payment_subscribe")],
                        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="payment_back")]
                    ]
                    
                    await query.edit_message_text(
                        f"üí≥ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏\n\n"
                        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {get_bot_setting('subscription_price', '999')} ‚ÇΩ/–º–µ—Å—è—Ü\n"
                        f"üìÖ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {settings.SUBSCRIPTION_DURATION_DAYS} –¥–Ω–µ–π\n\n"
                        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                        reply_markup=InlineKeyboardMarkup(keyboard)
                    )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é –æ–ø–ª–∞—Ç—ã: {e}")
            await query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="payment_back")
                ]])
            )
    
    @retry_on_failure(max_retries=3, delay=1.0)
    async def handle_payment_menu(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤ –º–µ–Ω—é –æ–ø–ª–∞—Ç—ã"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "payment_back":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            await self.handle_settings(update, context)
            return SETTINGS_MENU
        
        elif query.data == "payment_subscribe":
            # –°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã –Ω–∞ –Ω–∞—à–µ–º —Å–µ—Ä–≤–µ—Ä–µ
            from app.core.config import settings as core_settings
            pay_link = f"http://81.177.135.121:8001/pay?user_id={update.effective_user.id}"

            await query.edit_message_text(
                "üí≥ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ:\n\n"
                "–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –≤–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=pay_link)],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="payment_back")]
                ])
            )
        
        elif query.data == "payment_auto_renewal":
            # –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ
            user = update.effective_user
            try:
                with get_db_session() as db:
                    db_user = db.query(User).filter(User.telegram_id == user.id).first()
                    if db_user and db_user.subscription:
                        db_user.subscription.auto_renewal = True
                        # commit –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                        
                        await query.edit_message_text(
                            "‚úÖ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ!\n\n"
                            "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–µ–≤–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü.",
                            reply_markup=InlineKeyboardMarkup([[
                                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="payment_back")
                            ]])
                        )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è: {e}")
                await query.edit_message_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="payment_back")
                    ]])
                )
        
        elif query.data == "payment_cancel":
            # –û—Ç–∫–ª—é—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            user = update.effective_user
            try:
                with get_db_session() as db:
                    db_user = db.query(User).filter(User.telegram_id == user.id).first()
                    if db_user and db_user.subscription:
                        db_user.subscription.is_active = False
                        db_user.subscription.auto_renewal = False
                        # commit –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                        
                        await query.edit_message_text(
                            "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞!\n\n"
                            "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ –∫–æ–Ω—Ü–∞ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞.",
                            reply_markup=InlineKeyboardMarkup([[
                                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="payment_back")
                            ]])
                        )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
                await query.edit_message_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="payment_back")
                    ]])
                )
    
    async def handle_profile(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è"""
        query = update.callback_query
        await query.answer()
        
        user = update.effective_user
        telegram_id = user.id
        
        try:
            with get_db_session() as db:
                db_user = db.query(User).filter(User.telegram_id == telegram_id).first()
                if not db_user:
                    await query.edit_message_text(
                        "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_back")
                        ]])
                    )
                    return MAIN_MENU
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ
                profile_text = f"üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
                profile_text += f"üìù –§–∞–º–∏–ª–∏—è –∏ –∏–º—è: {db_user.full_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                profile_text += f"üè¢ –°—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {db_user.activity_field or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                profile_text += f"üè≠ –ö–æ–º–ø–∞–Ω–∏—è: {db_user.company or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                profile_text += f"üëî –†–æ–ª—å –≤ –∫–æ–º–ø–∞–Ω–∏–∏: {db_user.role_in_company or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                profile_text += f"üì± –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä: {db_user.contact_number or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                profile_text += f"üéØ –¶–µ–ª—å —É—á–∞—Å—Ç–∏—è: {db_user.participation_purpose or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                profile_text += f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {db_user.registration_date.strftime('%d.%m.%Y')}\n\n"
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ
                if db_user.has_active_subscription():
                    subscription = db_user.subscription
                    end_date = subscription.end_date.strftime("%d.%m.%Y")
                    days_left = (subscription.end_date - datetime.now(timezone.utc)).days
                    
                    profile_text += f"üí≥ –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: ‚úÖ –ê–∫—Ç–∏–≤–Ω–∞\n"
                    profile_text += f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {end_date}\n"
                    profile_text += f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}\n"
                    profile_text += f"üîÑ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ: {'–í–∫–ª—é—á–µ–Ω–æ' if subscription.auto_renewal else '–û—Ç–∫–ª—é—á–µ–Ω–æ'}"
                else:
                    profile_text += f"üí≥ –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: ‚ùå –ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏"
                
                keyboard = [
                    [InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_back")]
                ]
                
                await query.edit_message_text(
                    profile_text,
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
            await query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_back")
                ]])
            )
    
    async def handle_update_profile(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
        query = update.callback_query
        await query.answer()
        
        # –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –∑–∞–Ω–æ–≤–æ
        user = update.effective_user
        user_data_temp[user.id] = {
            'step': 0,
            'data': {}
        }
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.edit_message_text(
            "üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è\n\n–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):"
        )
        return FILLING_QUESTIONNAIRE
    
    async def handle_back_to_main(self, update: Update, context):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        query = update.callback_query
        await query.answer()
        
        await self.show_main_menu(update, context)
        return MAIN_MENU
    
    async def cancel_command(self, update: Update, context: CallbackContext) -> int:
        """–û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        user = update.effective_user
        if user.id in user_data_temp:
            del user_data_temp[user.id]
        
        await update.message.reply_text(
            "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω–æ–≤–æ."
        )
        return ConversationHandler.END

    async def request_consent(self, update: Update, context: CallbackContext) -> int:
        """–ó–∞–ø—Ä–æ—Å —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö"""
        user = update.effective_user
        user_id = user.id
        
        if user_id not in user_data_temp:
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start")
            return ConversationHandler.END
        
        user_data = user_data_temp[user_id]
        if user_data['step'] < 6:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∞–Ω–∫–µ—Ç—ã.")
            return FILLING_QUESTIONNAIRE
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–≥–ª–∞—Å–∏–µ
        consent_text = (
            "üìã –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö\n\n"
            "–Ø –¥–∞—é —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –º–æ–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å "
            "–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–º –∑–∞–∫–æ–Ω–æ–º –æ—Ç 27.07.2006 N 152-–§–ó ¬´–û –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö¬ª.\n\n"
            f"üìã –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞—à–µ–π –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏:\n"
            f"{settings.PRIVACY_POLICY_URL}\n\n"
            "–°–æ–≥–ª–∞—Å–Ω—ã –ª–∏ –≤—ã —Å —É—Å–ª–æ–≤–∏—è–º–∏?"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", callback_data="consent_yes")],
            [InlineKeyboardButton("‚ùå –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data="consent_no")]
        ]
        
        await update.message.reply_text(
            consent_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return WAITING_FOR_CONSENT

    async def handle_chat_member_update(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞"""
        try:
            if update.chat_member:
                chat_member = update.chat_member
                chat = chat_member.chat
                user = chat_member.new_chat_member.user
                old_status = chat_member.old_chat_member.status if chat_member.old_chat_member else None
                new_status = chat_member.new_chat_member.status
                
                logger.info(f"Chat member update: {user.username or user.first_name} in {chat.title}")
                logger.info(f"Status change: {old_status} -> {new_status}")
                logger.info(f"Chat type: {chat.type}, Chat ID: {chat.id}")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
                if new_status in ['member', 'administrator', 'owner'] and old_status not in ['member', 'administrator', 'owner']:
                    await self.handle_user_joined_channel(chat, user, new_status)
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã—Ö–æ–¥ –∏–∑ –∫–∞–Ω–∞–ª–∞
                elif old_status in ['member', 'administrator', 'owner'] and new_status not in ['member', 'administrator', 'owner']:
                    await self.handle_user_left_channel(chat, user, old_status)
                    
        except Exception as e:
            logger.error(f"Error in handle_chat_member_update: {e}")

    async def handle_new_chat_members(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞"""
        try:
            if update.message and update.message.new_chat_members:
                chat = update.message.chat
                for new_member in update.message.new_chat_members:
                    if not new_member.is_bot:
                        logger.info(f"New member joined via message: {new_member.username or new_member.first_name} in {chat.title}")
                        await self.handle_user_joined_channel(chat, new_member, 'member')
        except Exception as e:
            logger.error(f"Error in handle_new_chat_members: {e}")

    async def handle_left_chat_member(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Ö–æ–¥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ —á–∞—Ç–∞"""
        try:
            if update.message and update.message.left_chat_member:
                chat = update.message.chat
                left_member = update.message.left_chat_member
                if not left_member.is_bot:
                    logger.info(f"Member left via message: {left_member.username or left_member.first_name} from {chat.title}")
                    await self.handle_user_left_channel(chat, left_member, 'left')
        except Exception as e:
            logger.error(f"Error in handle_left_chat_member: {e}")

    async def handle_all_messages(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        try:
            if update.message:
                chat = update.message.chat
                user = update.message.from_user
                if chat.type == 'channel':
                    logger.info(f"Channel message: {user.username or user.first_name} in {chat.title}")
        except Exception as e:
            logger.error(f"Error in handle_all_messages: {e}")

    async def handle_user_joined_channel(self, chat, user, status: str) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–Ω–∞–ª"""
        try:
            from app.models.models import ChannelMembership
            from app.core.database import get_db
            from app.core.config import settings
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–∞—à –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª
            if str(chat.id) == settings.FREE_CHANNEL_ID.replace('@', '') or chat.username == settings.FREE_CHANNEL_ID.replace('@', ''):
                logger.info(f"User {user.username or user.first_name} joined FREE channel: {chat.title}")
                
                db = next(get_db())
                
                # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ —á–ª–µ–Ω—Å—Ç–≤–µ
                membership = db.query(ChannelMembership).filter(
                    ChannelMembership.user_id == user.id,
                    ChannelMembership.channel_type == 'free'
                ).first()
                
                if membership:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                    membership.is_current = True
                    membership.joined_at = datetime.now(timezone.utc)
                    membership.status = status
                    membership.updated_at = datetime.now(timezone.utc)
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                    membership = ChannelMembership(
                        user_id=user.id,
                        username=user.username,
                        full_name=user.full_name,
                        channel_type='free',
                        channel_id=str(chat.id),
                        channel_title=chat.title,
                        status=status,
                        joined_at=datetime.now(timezone.utc),
                        is_current=True
                    )
                    db.add(membership)
                
                db.commit()
                logger.info(f"Channel membership recorded for user {user.id} in FREE channel")
                
        except Exception as e:
            logger.error(f"Error handling user joined channel: {e}")

    async def handle_user_left_channel(self, chat, user, old_status: str) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–∞–Ω–∞–ª–∞"""
        try:
            from app.models.models import ChannelMembership
            from app.core.database import get_db
            from app.core.config import settings
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–∞—à –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª
            if str(chat.id) == settings.FREE_CHANNEL_ID.replace('@', '') or chat.username == settings.FREE_CHANNEL_ID.replace('@', ''):
                logger.info(f"User {user.username or user.first_name} left FREE channel: {chat.title}")
                
                db = next(get_db())
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ —á–ª–µ–Ω—Å—Ç–≤–µ
                membership = db.query(ChannelMembership).filter(
                    ChannelMembership.user_id == user.id,
                    ChannelMembership.channel_type == 'free'
                ).first()
                
                if membership:
                    membership.is_current = False
                    membership.left_at = datetime.now(timezone.utc)
                    membership.updated_at = datetime.now(timezone.utc)
                    db.commit()
                    logger.info(f"Channel membership updated for user {user.id} - left FREE channel")
                
        except Exception as e:
            logger.error(f"Error handling user left channel: {e}")
    
    async def handle_chat_join_request(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª (channels with Join Request)."""
        try:
            join_req = update.chat_join_request
            if not join_req:
                return
            chat = join_req.chat
            user = join_req.from_user
            
            # –ü—Ä–∏–Ω–∏–º–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ–ø—Ä–∏–µ–º)
            try:
                await context.bot.approve_chat_join_request(chat.id, user.id)
                logger.info(f"Approved join request for {user.id} to {chat.title}")
            except Exception as e:
                logger.warning(f"Approve join request failed: {e}")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ ChannelMembership
            from app.models.models import ChannelMembership
            from app.core.database import get_db
            
            db = next(get_db())
            membership = db.query(ChannelMembership).filter(
                ChannelMembership.user_id == user.id,
                ChannelMembership.channel_type == 'free'
            ).first()
            now_utc = datetime.now(timezone.utc)
            if membership:
                membership.is_current = True
                membership.joined_at = now_utc
                membership.updated_at = now_utc
                membership.status = 'member'
            else:
                db.add(ChannelMembership(
                    user_id=user.id,
                    username=user.username,
                    full_name=user.full_name,
                    channel_type='free',
                    channel_id=str(chat.id),
                    channel_title=chat.title,
                    status='member',
                    joined_at=now_utc,
                    is_current=True
                ))
            db.commit()
            logger.info(f"Join request recorded in DB for user {user.id} in FREE channel")
        except Exception as e:
            logger.error(f"Error in handle_chat_join_request: {e}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.application.run_polling()


_bot_singleton = None

def create_bot():
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞ (—Å–∏–Ω–≥–ª—Ç–æ–Ω)"""
    global _bot_singleton
    if _bot_singleton is not None:
        return _bot_singleton
    if not settings.TELEGRAM_TOKEN:
        raise ValueError("TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    _bot_singleton = TelegramBot(settings.TELEGRAM_TOKEN)
    return _bot_singleton

    
def reset_bot_singleton():
    """–°–±—Ä–æ—Å —Å–∏–Ω–≥–ª—Ç–æ–Ω–∞ –±–æ—Ç–∞ (–¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫)."""
    global _bot_singleton
    _bot_singleton = None
