"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
"""
from datetime import datetime, timedelta, timezone
from sqlalchemy.orm import Session
from app.models.models import User, Subscription
from app.core.config import settings
import logging

logger = logging.getLogger(__name__)


class SubscriptionManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏"""
    
    def __init__(self):
        self.notification_intervals = [7, 3, 1]  # –î–Ω–∏ –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self._bot = None
    
    @property
    def bot(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞"""
        if self._bot is None:
            from app.bot.bot import create_bot
            self._bot = create_bot()
        return self._bot
    
    async def check_expiring_subscriptions(self, db: Session):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            now = datetime.now(timezone.utc)
            
            for days in self.notification_intervals:
                # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–µ–∫–∞—é—Ç —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
                target_date = now + timedelta(days=days)
                start_date = target_date.replace(hour=0, minute=0, second=0, microsecond=0)
                end_date = start_date + timedelta(days=1)
                
                expiring_subscriptions = db.query(Subscription).join(User).filter(
                    Subscription.is_active == True,
                    Subscription.end_date >= start_date,
                    Subscription.end_date < end_date
                ).all()
                
                for subscription in expiring_subscriptions:
                    await self.send_expiration_notification(subscription, days)
            
            logger.info(f"Checked expiring subscriptions for {len(self.notification_intervals)} intervals")
            
        except Exception as e:
            logger.error(f"Error checking expiring subscriptions: {e}")
    
    async def send_expiration_notification(self, subscription: Subscription, days_left: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            user = subscription.user
            
            if days_left == 1:
                message = (
                    "‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï!** ‚ö†Ô∏è\n\n"
                    "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç **–ó–ê–í–¢–†–ê**!\n\n"
                    "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–ª–∞—Ç–Ω–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É, "
                    "–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.\n\n"
                    "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price} —Ä—É–±.\n"
                    "–û–ø–ª–∞—Ç–∏—Ç–µ —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –û–ø–ª–∞—Ç–∞ –≤ –±–æ—Ç–µ.\n\n"
                    "–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã."
                ).format(
                    price=settings.SUBSCRIPTION_PRICE
                )
            elif days_left == 3:
                message = (
                    "üìÖ **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ**\n\n"
                    "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ **{days} –¥–Ω—è**.\n\n"
                    "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price} —Ä—É–±.\n"
                    "–û–ø–ª–∞—Ç–∏—Ç–µ —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –û–ø–ª–∞—Ç–∞ –≤ –±–æ—Ç–µ.\n\n"
                    "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–æ—Å—Ç—É–ø!"
                ).format(
                    days=days_left,
                    price=settings.SUBSCRIPTION_PRICE
                )
            else:
                message = (
                    "üìÖ **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ**\n\n"
                    "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ **{days} –¥–Ω–µ–π**.\n\n"
                    "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price} —Ä—É–±.\n"
                    "–û–ø–ª–∞—Ç–∏—Ç–µ —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –û–ø–ª–∞—Ç–∞ –≤ –±–æ—Ç–µ.\n\n"
                    "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∑–∞—Ä–∞–Ω–µ–µ!"
                ).format(
                    days=days_left,
                    price=settings.SUBSCRIPTION_PRICE
                )
            
            await self.bot.application.bot.send_message(
                chat_id=user.telegram_id,
                text=message,
                parse_mode='Markdown'
            )
            
            logger.info(f"Sent expiration notification to user {user.telegram_id} for {days_left} days")
            
        except Exception as e:
            logger.error(f"Error sending expiration notification to user {subscription.user_id}: {e}")
    
    async def remove_expired_subscriptions(self, db: Session):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–∏–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –∏–∑ –ø–ª–∞—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
        try:
            now = datetime.now(timezone.utc)
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–∏–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
            expired_subscriptions = db.query(Subscription).join(User).filter(
                Subscription.is_active == True,
                Subscription.end_date < now
            ).all()
            
            removed_count = 0
            
            for subscription in expired_subscriptions:
                try:
                    user = subscription.user
                    
                    # –£–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø–ª–∞—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
                    await self.remove_user_from_paid_channel(user.telegram_id)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
                    subscription.is_active = False
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–Ω–∞–ª–µ
                    user.is_in_paid_channel = False
                    user.paid_channel_join_date = None
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏
                    await self.send_removal_notification(user)
                    
                    removed_count += 1
                    
                except Exception as e:
                    logger.error(f"Error removing user {subscription.user_id} from paid channel: {e}")
                    continue
            
            if removed_count > 0:
                db.commit()
                logger.info(f"Removed {removed_count} users with expired subscriptions from paid channel")
            
        except Exception as e:
            logger.error(f"Error removing expired subscriptions: {e}")
            db.rollback()
    
    async def remove_user_from_paid_channel(self, telegram_id: int):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø–ª–∞—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º ID –ø–ª–∞—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            paid_channel_id = settings.PAID_CHANNEL_ID
            
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–∞–Ω–∞–ª–∞
            await self.bot.application.bot.ban_chat_member(
                chat_id=paid_channel_id,
                user_id=telegram_id
            )
            
            logger.info(f"User {telegram_id} removed from paid channel {paid_channel_id}")
            
        except Exception as e:
            logger.error(f"Error removing user {telegram_id} from paid channel: {e}")
            raise
    
    async def send_removal_notification(self, user: User):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –ø–ª–∞—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
        try:
            message = (
                "‚ùå **–î–æ—Å—Ç—É–ø –∫ –ø–ª–∞—Ç–Ω–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É –∑–∞–∫—Ä—ã—Ç**\n\n"
                "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞, –∏ –≤—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –ø–ª–∞—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞.\n\n"
                "–î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞:\n"
                "1. üí∞ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É (–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –û–ø–ª–∞—Ç–∞ –≤ –±–æ—Ç–µ)\n"
                "2. ‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!"
            )
            
            await self.bot.application.bot.send_message(
                chat_id=user.telegram_id,
                text=message,
                parse_mode='Markdown'
            )
            
            logger.info(f"Sent removal notification to user {user.telegram_id}")
            
        except Exception as e:
            logger.error(f"Error sending removal notification to user {user.telegram_id}: {e}")
    
    async def add_user_to_paid_channel(self, user: User, db: Session):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–ª–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            paid_channel_id = settings.PAID_CHANNEL_ID
            
            # –ü—Ä–∏–≥–ª–∞—à–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–ª–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª
            invite_link = await self.bot.application.bot.create_chat_invite_link(
                chat_id=paid_channel_id,
                expire_date=datetime.now(timezone.utc) + timedelta(hours=24),
                creates_join_request=False
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            message = (
                "üéâ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–ª–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª!**\n\n"
                "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n"
                "üîó –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ: {invite_link}\n\n"
                "–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É.\n"
                "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!"
            ).format(invite_link=invite_link.invite_link)
            
            await self.bot.application.bot.send_message(
                chat_id=user.telegram_id,
                text=message,
                parse_mode='Markdown'
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user.is_in_paid_channel = True
            user.paid_channel_join_date = datetime.now(timezone.utc)
            
            db.commit()
            
            logger.info(f"User {user.telegram_id} added to paid channel {paid_channel_id}")
            
        except Exception as e:
            logger.error(f"Error adding user {user.telegram_id} to paid channel: {e}")
            db.rollback()
            raise


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
subscription_manager = SubscriptionManager()
