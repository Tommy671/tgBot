import asyncio
import os
import sys
from typing import Dict, Set

# Ensure project root is in sys.path
CURRENT_DIR = os.path.dirname(os.path.abspath(__file__))
PROJECT_ROOT = os.path.abspath(os.path.join(CURRENT_DIR, os.pardir))
if PROJECT_ROOT not in sys.path:
    sys.path.append(PROJECT_ROOT)

try:
    from app.core.config import Settings
except Exception:
    Settings = None

from telegram import Bot
from telegram.error import TelegramError


async def main() -> None:
    # Load token
    token: str
    if Settings is not None:
        try:
            settings = Settings()
            token = settings.TELEGRAM_TOKEN
        except Exception:
            token = os.getenv("TELEGRAM_TOKEN", "")
    else:
        token = os.getenv("TELEGRAM_TOKEN", "")

    if not token:
        print("‚ùå TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ .env –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        return

    bot = Bot(token=token)

    found_chat_ids: Set[int] = set()
    chat_meta: Dict[int, dict] = {}

    # Try to fetch recent updates to discover chats the bot interacted with
    try:
        updates = await bot.get_updates(limit=100)
    except TelegramError as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–≤–æ–∑–º–æ–∂–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è webhook): {e}")
        updates = []

    def collect_chat(chat) -> None:
        if not chat:
            return
        if chat.id in found_chat_ids:
            return
        found_chat_ids.add(chat.id)
        chat_meta[chat.id] = {"type": chat.type, "title": getattr(chat, "title", None), "username": getattr(chat, "username", None)}

    for u in updates:
        if u.message and u.message.chat:
            collect_chat(u.message.chat)
        if u.edited_message and u.edited_message.chat:
            collect_chat(u.edited_message.chat)
        if u.channel_post and u.channel_post.chat:
            collect_chat(u.channel_post.chat)
        if u.edited_channel_post and u.edited_channel_post.chat:
            collect_chat(u.edited_channel_post.chat)
        if u.my_chat_member and u.my_chat_member.chat:
            collect_chat(u.my_chat_member.chat)
        if u.chat_member and u.chat_member.chat:
            collect_chat(u.chat_member.chat)
        if u.chat_join_request and u.chat_join_request.chat:
            collect_chat(u.chat_join_request.chat)

    if not found_chat_ids:
        print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —á–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ getUpdates.\n–ü–æ–¥—Å–∫–∞–∑–∫–∞: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω—É–∂–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö/–≥—Ä—É–ø–ø–∞—Ö –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ/–¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞, –∑–∞—Ç–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç. –õ–∏–±–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ username –≤ –¥—Ä—É–≥–æ–º —Å–∫—Ä–∏–ø—Ç–µ.")

    # Enrich info for each chat id
    print("\nüëÄ –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —á–∞—Ç—ã, –≥–¥–µ –±–æ—Ç –ø–æ–ª—É—á–∞–ª —Å–æ–±—ã—Ç–∏—è:")
    print("=" * 50)
    for chat_id in sorted(found_chat_ids):
        try:
            chat = await bot.get_chat(chat_id)
            # member count
            member_count = None
            try:
                member_count = await bot.get_chat_member_count(chat_id)
            except TelegramError:
                pass

            # admin status
            is_admin = False
            admin_rights = None
            try:
                admins = await bot.get_chat_administrators(chat_id)
                for adm in admins:
                    if adm.user and adm.user.is_bot:
                        me = await bot.get_me()
                        if adm.user.id == me.id:
                            is_admin = True
                            admin_rights = adm.can_manage_chat
                            break
            except TelegramError:
                pass

            print(f"ID: {chat.id}\n–¢–∏–ø: {chat.type}\n–ù–∞–∑–≤–∞–Ω–∏–µ: {getattr(chat, 'title', None)}\nUsername: {getattr(chat, 'username', None)}\n–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {member_count}\n–ë–æ—Ç –∞–¥–º–∏–Ω: {'‚úÖ' if is_admin else '‚ùå'}\n---")
        except TelegramError as e:
            meta = chat_meta.get(chat_id, {})
            print(f"ID: {chat_id} (—Ç–∏–ø: {meta.get('type')}, –Ω–∞–∑–≤–∞–Ω–∏–µ: {meta.get('title')}) ‚Äî –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

    print("\nüí° –ï—Å–ª–∏ –Ω—É–∂–Ω—ã–µ —á–∞—Ç—ã –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å: \n- –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç–∏—Ö –∫–∞–Ω–∞–ª–∞—Ö/–≥—Ä—É–ø–ø–∞—Ö –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞, —á—Ç–æ–±—ã –ø–æ—è–≤–∏–ª–∞—Å—å –∑–∞–ø–∏—Å—å –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö.\n- –õ–∏–±–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∫—Ä–∏–ø—Ç check_bot_permissions.py, —É–∫–∞–∑–∞–≤ @username –∫–∞–Ω–∞–ª–∞ (–¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö). –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∏ –ø–æ—è–≤–∏–ª–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")


if __name__ == "__main__":
    asyncio.run(main())


